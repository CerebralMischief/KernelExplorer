#pragma once

#define KEXPLORE_IOCTL_GET_EXPORTED_NAME        CTL_CODE(FILE_DEVICE_UNKNOWN, 0x900, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define KEXPLORE_IOCTL_READ_MEMORY              CTL_CODE(FILE_DEVICE_UNKNOWN, 0x901, METHOD_OUT_DIRECT, FILE_ANY_ACCESS)
#define KEXPLORE_IOCTL_WRITE_MEMORY             CTL_CODE(FILE_DEVICE_UNKNOWN, 0x902, METHOD_IN_DIRECT, FILE_ANY_ACCESS)
#define KEXPLORE_IOCTL_ENUM_JOBS                CTL_CODE(FILE_DEVICE_UNKNOWN, 0x903, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define KEXPLORE_IOCTL_ENUM_CHILD_JOBS          CTL_CODE(FILE_DEVICE_UNKNOWN, 0x904, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define KEXPLORE_IOCTL_OPEN_OBJECT_HANDLE       CTL_CODE(FILE_DEVICE_UNKNOWN, 0x905, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define KEXPLORE_IOCTL_READ_PROCESS_MEMORY      CTL_CODE(FILE_DEVICE_UNKNOWN, 0x906, METHOD_OUT_DIRECT, FILE_ANY_ACCESS)
#define KEXPLORE_IOCTL_WRITE_PROCESS_MEMORY     CTL_CODE(FILE_DEVICE_UNKNOWN, 0x907, METHOD_IN_DIRECT, FILE_ANY_ACCESS)
#define KEXPLORE_IOCTL_ENUM_PROCESSES           CTL_CODE(FILE_DEVICE_UNKNOWN, 0x908, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define KEXPLORE_IOCTL_ENUM_THREADS             CTL_CODE(FILE_DEVICE_UNKNOWN, 0x909, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define KEXPLORE_IOCTL_ENUM_PROCESS_THREADS     CTL_CODE(FILE_DEVICE_UNKNOWN, 0x909, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define KEXPLORE_IOCTL_INIT_KERNEL_FUNCTIONS    CTL_CODE(FILE_DEVICE_UNKNOWN, 0x90a, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define KEXPLORE_IOCTL_DEREFERENCE_OBJECTS		CTL_CODE(FILE_DEVICE_UNKNOWN, 0x90b, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define KEXPLORE_IOCTL_CLOSE_HANDLE				CTL_CODE(FILE_DEVICE_UNKNOWN, 0x90c, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define KEXPLORE_IOCTL_OPEN_PROCESS				CTL_CODE(FILE_DEVICE_UNKNOWN, 0x90d, METHOD_BUFFERED, FILE_ANY_ACCESS)

enum class IoctlCodes : ULONG { 
    GET_EXPORTED_NAME       = CTL_CODE(FILE_DEVICE_UNKNOWN, 0x900, METHOD_BUFFERED, FILE_ANY_ACCESS),
    READ_MEMORY             = CTL_CODE(FILE_DEVICE_UNKNOWN, 0x901, METHOD_OUT_DIRECT, FILE_ANY_ACCESS),
    WRITE_MEMORY            = CTL_CODE(FILE_DEVICE_UNKNOWN, 0x902, METHOD_IN_DIRECT, FILE_ANY_ACCESS),
    ENUM_JOBS               = CTL_CODE(FILE_DEVICE_UNKNOWN, 0x903, METHOD_BUFFERED, FILE_ANY_ACCESS),
    ENUM_CHILD_JOBS         = CTL_CODE(FILE_DEVICE_UNKNOWN, 0x904, METHOD_BUFFERED, FILE_ANY_ACCESS),
    OPEN_OBJECT_HANDLE      = CTL_CODE(FILE_DEVICE_UNKNOWN, 0x905, METHOD_BUFFERED, FILE_ANY_ACCESS),
    READ_PROCESS_MEMORY     = CTL_CODE(FILE_DEVICE_UNKNOWN, 0x906, METHOD_OUT_DIRECT, FILE_ANY_ACCESS),
    WRITE_PROCESS_MEMORY    = CTL_CODE(FILE_DEVICE_UNKNOWN, 0x907, METHOD_IN_DIRECT, FILE_ANY_ACCESS),
    ENUM_PROCESSES          = CTL_CODE(FILE_DEVICE_UNKNOWN, 0x908, METHOD_BUFFERED, FILE_ANY_ACCESS),
    ENUM_THREADS            = CTL_CODE(FILE_DEVICE_UNKNOWN, 0x909, METHOD_BUFFERED, FILE_ANY_ACCESS),
    ENUM_PROCESS_THREADS    = CTL_CODE(FILE_DEVICE_UNKNOWN, 0x909, METHOD_BUFFERED, FILE_ANY_ACCESS),
    INIT_KERNEL_FUNCTIONS   = CTL_CODE(FILE_DEVICE_UNKNOWN, 0x90a, METHOD_BUFFERED, FILE_ANY_ACCESS),
    DEREFERENCE_OBJECTS		= CTL_CODE(FILE_DEVICE_UNKNOWN, 0x90b, METHOD_BUFFERED, FILE_ANY_ACCESS),
    CLOSE_HANDLE			= CTL_CODE(FILE_DEVICE_UNKNOWN, 0x90c, METHOD_BUFFERED, FILE_ANY_ACCESS),
	OPEN_PROCESS			= CTL_CODE(FILE_DEVICE_UNKNOWN, 0x90d, METHOD_BUFFERED, FILE_ANY_ACCESS)
};

struct KernelObjectData {
	PVOID Address;
	HANDLE Handle;
};

struct OpenProcessData {
	ULONG ProcessId;
	ACCESS_MASK AccessMask;
};

struct OpenHandleData {
    PVOID Object;
    ACCESS_MASK AccessMask;
};

struct ReadWriteProcessMemory {
    ULONG ProcessId; 
    PVOID Address;
};

#ifndef KERNELDRIVER

struct KernelFunctions {
    PVOID PspGetNextJob;
    PVOID PsGetNextProcess;
};

#else

typedef PEJOB (*FPspGetNextJob)(PEJOB Job);
typedef PEPROCESS (*FPsGetNextProcess)(PEPROCESS Process);

struct KernelFunctions {
    FPspGetNextJob PspGetNextJob;
    FPsGetNextProcess PsGetNextProcess;
};

#endif
